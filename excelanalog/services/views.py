import os
import openpyxl
from django.http import HttpResponse
from django.shortcuts import render, get_object_or_404, redirect
from openpyxl.utils import get_column_letter
from openpyxl.workbook import Workbook
from .forms import CheckListForm, ReestrForm
from .models import Columns, CheckList, Reestr
from openpyxl.styles import Font, PatternFill, Alignment
from openpyxl.worksheet.datavalidation import DataValidation
import pandas as pd
from openpyxl.styles import Border, Side
from django.http import HttpResponse
from django.template.defaultfilters import slugify
from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
from openpyxl.styles import PatternFill

# Create your views here.
def index(request):
    return render(request, 'base.html')


def upload_file(request):
    if request.method == 'POST':
        file = request.FILES['file']

        # Проверка заполнения всех строк на одном уровне
        workbook = openpyxl.load_workbook(file)
        worksheet = workbook['Sheet2']  # Имя вашего второго листа

        for row_num in range(3, 21):
            if worksheet.cell(row=row_num, column=2).value:
                for col_num in range(1, 8):
                    if not worksheet.cell(row=row_num, column=col_num).value:
                        return HttpResponse(
                            '<div style="text-align: center; font-weight: bold; font-size: 24px; color: black; margin-top: 100px; font-family: Arial;">Пожалуйста, заполните все строки на одном уровне</div>')

                # Если все поля заполнены, продолжайте выполнение кода ниже

                # Добавляем надпись "Проверено" в ячейку B1
                worksheet['B1'] = 'Проверено'

                green_fill = PatternFill(start_color='00FF00', end_color='00FF00', fill_type='solid')
                worksheet['B1'].fill = green_fill

        # Создаем временный файл для сохранения изменений
        temp_file_name = f"{slugify(file.name)}.xlsx"
        temp_file_path = default_storage.save(temp_file_name, ContentFile(''))

        # Сохраняем изменения в временном файле
        workbook.save(temp_file_path)

        # Загружаем временный файл пользователю
        with default_storage.open(temp_file_path, 'rb') as temp_file:
            response = HttpResponse(temp_file, content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            response['Content-Disposition'] = f'attachment; filename="{file.name}"'
            return response

    return render(request, 'upload.html')



def svod(request):
    if request.method == 'POST':
        files = request.FILES.getlist('files')  # Получение списка загруженных файлов

        # Создание пустого сводного DataFrame для первого листа
        summary_df1 = pd.DataFrame(
            columns=['номер п/п', 'Код КП(общий)', 'Код КП(промежуточный)', 'Наименование КП', 'Описание КП',
                     'Переодичность проведения', 'Способ подсчета результаты проведения КП',
                     'Подразделение, ответственное за проведение контрольной процедуры', 'Исполнитель КП',
                     'Количество выполненых КП', 'Количество выявленных ошибок'])

        # Создание пустого сводного DataFrame для второго листа
        summary_df2 = pd.DataFrame(columns=['№ п/п', 'Код КП(промежуточный)', 'Исполнитель ИП', 'номер чек листа',
                                            'Объект контроля (договор, акт, счет-фактура, КС-2 и др.)',
                                            'Дата документа', 'Номер документа', 'Количество документов/операций',
                                            'Количество ошибок/нарушений', 'Примечание'])

        codes = ['НУ-ОБЩ-1-КП-001', 'НУ-ОБЩ-1-КП-002', 'НУ-ОБЩ-1-КП-003',
'НУ-ОБЩ-1-КП-004', 'НУ-ОБЩ-1-КП-005', 'НУ-ОБЩ-1-КП-006',
'НУ-ОБЩ-1-КП-007', 'НУ-ОБЩ-1-КП-008', 'НУ-ОБЩ-1-КП-009',
'НУ-ОБЩ-1-КП-010', 'НУ-ОБЩ-1-КП-011', 'НУ-ПРИБ-1-КП-001',
'НУ-ПРИБ-1-КП-002', 'НУ-ПРИБ-1-КП-003', 'НУ-ПРИБ-1-КП-009',
'НУ-ПРИБ-1-КП-010', 'НУ-ПРИБ-1-КП-011', 'НУ-ПРИБ-1-КП-013',
'НУ-ПРИБ-1-КП-014', 'НУ-ПРИБ-1-КП-015', 'НУ-ПРИБ-1-КП-016',
'НУ-ПРИБ-1-КП-017', 'НУ-ПРИБ-1-КП-019', 'НУ-ПРИБ-1-КП-020',
'НУ-ПРИБ-1-КП-021' 'НУ-ПРИБ-1-КП-025', 'НУ-ПРИБ-1-КП-026'
'НУ-ПРИБ-1-КП-028', 'НУ-ПРИБ-1-КП-029', 'НУ-ПРИБ-1-КП-030',
'НУ-ПРИБ-1-КП-033', 'НУ-ПРИБ-1-КП-036', 'НУ-ПРИБ-1-КП-039',
'НУ-ПРИБ-1-КП-040', 'НУ-ПРИБ-1-КП-042', 'НУ-ПРИБ-1-КП-044',
'НУ-ПРИБ-1-КП-045', 'НУ-ПРИБ-1-КП-046', 'НУ-НДС-1-КП-001',
'НУ-НДС-1-КП-002', 'НУ-НДС-1-КП-003', 'НУ-НДС-1-КП-004',
'НУ-НДС-1-КП-005', 'НУ-НДС-1-КП-006', 'НУ-НДС-1-КП-007',
'НУ-НДС-1-КП-008', 'НУ-НДС-1-КП-009', 'НУ-НДС-1-КП-010',
'НУ-НДС-1-КП-011', 'НУ-НДС-1-КП-012', 'НУ-НДС-1-КП-013',
'НУ-НДС-1-КП-014', 'НУ-НДС-1-КП-015', 'НУ-НИ-1-КП-001',
'НУ-НИ-1-КП-002', 'НУ-НИ-1-КП-003', 'НУ-НИ-1-КП-004',
'НУ-НИ-1-КП-005', 'НУ-НИ-1-КП-006', 'НУ-ТН-1-КП-001',
'НУ-ТН-1-КП-002', 'НУ-ТН-1-КП-005', 'НУ-ТН-1-КП-004',
'НУ-ЗН-1-КП-001', 'НУ-ЗН-1-КП-002', 'НУ-ЗН-1-КП-003',
'НУ-ЗН-1-КП-004', 'НУ-НДПИ-1-КП-001', 'НУ-НДПИ-1-КП-002',
'НУ-НДПИ-1-КП-006', 'НУ-ВН-1-КП-001', 'НУ-ВН-1-КП-002',
'НУ-ВН-1-КП-003', 'НУ-НДФЛ-1-КП-001', 'НУ-НДФЛ-1-КП-003',
'НУ-НДФЛ-1-КП-004', 'НУ-НДФЛ-1-КП-005', 'НУ-НДФЛ-1-КП-006',
'НУ-СВ-1-КП-001', 'НУ-СВ-1-КП-002', 'НУ-СВ-1-КП-003',]




        summary_df3 = pd.DataFrame({
            'Код КП(общий)': codes,


                                   })

        codes1 = ['НУ-ОБЩ-1-КП-001',
                'НУ-ОБЩ-1-КП-002',
                  'НУ-ОБЩ-1-КП-003',
                 'НУ-ОБЩ-1-КП-004',
                  'НУ-ОБЩ-1-КП-005',
                  'НУ-ОБЩ-1-КП-006',
                 'НУ-ОБЩ-1-КП-007',
                  'НУ-ОБЩ-1-КП-008',
                  'НУ-ОБЩ-1-КП-009',
                 'НУ-ОБЩ-1-КП-010',
                  'НУ-ОБЩ-1-КП-011',
                  'НУ-ПРИБ-1-КП-001',
                 'НУ-ПРИБ-1-КП-002',
                  'НУ-ПРИБ-1-КП-003',
                  'НУ-ПРИБ-1-КП-009',
                 'НУ-ПРИБ-1-КП-010',
                  'НУ-ПРИБ-1-КП-011',
                  'НУ-ПРИБ-1-КП-013',
                 'НУ-ПРИБ-1-КП-014',
                  'НУ-ПРИБ-1-КП-015',
                  'НУ-ПРИБ-1-КП-016',
                 'НУ-ПРИБ-1-КП-017',
                  'НУ-ПРИБ-1-КП-019',
                  'НУ-ПРИБ-1-КП-020',
                 'НУ-ПРИБ-1-КП-021',
                  'НУ-ПРИБ-1-КП-025',
                  'НУ-ПРИБ-1-КП-026'
               'НУ-ПРИБ-1-КП-028',
                  'НУ-ПРИБ-1-КП-029',
                  'НУ-ПРИБ-1-КП-030',
                 'НУ-ПРИБ-1-КП-033',
                  'НУ-ПРИБ-1-КП-036',
                  'НУ-ПРИБ-1-КП-039',
                 'НУ-ПРИБ-1-КП-040',
                  'НУ-ПРИБ-1-КП-042',
                  'НУ-ПРИБ-1-КП-044',
                 'НУ-ПРИБ-1-КП-045',
                  'НУ-ПРИБ-1-КП-046',
                  'НУ-НДС-1-КП-001',
                 'НУ-НДС-1-КП-002',
                  'НУ-НДС-1-КП-003',
                  'НУ-НДС-1-КП-004',
                 'НУ-НДС-1-КП-005',
                  'НУ-НДС-1-КП-006',
                  'НУ-НДС-1-КП-007',
                 'НУ-НДС-1-КП-008',
                  'НУ-НДС-1-КП-009',
                  'НУ-НДС-1-КП-010',
                 'НУ-НДС-1-КП-011',
                  'НУ-НДС-1-КП-012',
                  'НУ-НДС-1-КП-013',
                 'НУ-НДС-1-КП-014',
                  'НУ-НДС-1-КП-015',
                  'НУ-НИ-1-КП-001',
                 'НУ-НИ-1-КП-002',
                  'НУ-НИ-1-КП-003',
                  'НУ-НИ-1-КП-004',
                 'НУ-НИ-1-КП-005',
                  'НУ-НИ-1-КП-006',
                  'НУ-ТН-1-КП-001',
                 'НУ-ТН-1-КП-002',
                  'НУ-ТН-1-КП-005',
                  'НУ-ТН-1-КП-004',
                 'НУ-ЗН-1-КП-001',
                  'НУ-ЗН-1-КП-002',
                  'НУ-ЗН-1-КП-003',
                 'НУ-ЗН-1-КП-004',
                  'НУ-НДПИ-1-КП-001',
                  'НУ-НДПИ-1-КП-002',
                 'НУ-НДПИ-1-КП-006',
                  'НУ-ВН-1-КП-001',
                  'НУ-ВН-1-КП-002',
                 'НУ-ВН-1-КП-003',
                  'НУ-НДФЛ-1-КП-001',
                  'НУ-НДФЛ-1-КП-003',
                 'НУ-НДФЛ-1-КП-004',
                  'НУ-НДФЛ-1-КП-005',
                  'НУ-НДФЛ-1-КП-006',
                 'НУ-СВ-1-КП-001',
                  'НУ-СВ-1-КП-002',
                  'НУ-СВ-1-КП-003',]

        codes2 = [
            'Контроль отражения методологической позиции по налоговому учету хозяйственных операций в методологических документах компании',
            'Мониторинг изменений налогового законодательства',
            'Проверка полноты и достоверности ПУД',
            'Проверка корректности ПУД и осуществления проводки в учетной системе',
            'Проверка полноты и корректности внесения данных в НСИ',
            'Контроль полноты и корректности', 'формирования деклараций (расчетов)',
            'Контроль представления отчетности в налоговый орган',
            'Контроль корректности исчисления суммы налогов, сборов, страховых взносов',
            'Контроль своевременности уплаты (перечисления) налогов, сборов, страховых взносов',
            'Контроль за соблюдением порядка и сроков хранения первичных учетных документов и регистров',
            'Автоматизированная проверка корректности налоговых деклараций и контрольных соотношений показателей налоговой отчетности',
            'Проверка экономической целесообразности сделки',
            'Проверка контрагентов',
            'Экспертиза проектов договоров',
            'Контроль корректности формирования проводки в учетной системе',
            'Контроль за отражением в составе внереализационных доходов сумм доходов в виде штрафов, пеней и (или) иных санкций за нарушение договорных обязательств, а также сумм возмещения убытков или ущерба',
            'Проверка своевременности проведения арендной платы по договорам аренды ОС',
            'Контроль списания безнадежного долга',
            'Контроль полноты и корректности отражения в учетной системе проводок поступления объекта',
            'Проверка акта на ввод в эксплуатацию / акта приема-передачи ОС',
            'Контроль корректности отражения в карточке ОС данных об ОС',
            'Контроль корректности расчета амортизации для целей налогового учета',
            'Автоматизированный контроль корректности и своевременности признания амортизационной премии в составе расходов',
            'Контроль корректности, правомерности и своевременности признания амортизационной премии в составе расходов',
            'Автоматизированный контроль корректности, правомерности и своевременности отражения в налоговом учете восстановления амортизационной премии',
            'Квалификация операций в качестве текущего ремонта/ капитального ремонта / реконструкции / модернизации / технического перевооружения',
            'Контроль правильности квалификации операций в качестве капитального ремонта / реконструкции / модернизации / технического перевооружения',
            'Ручной контроль корректности и правомерности отражения расходов по оплате труда в налоговом учете',
            'Контроль отнесения расходов к непринимаемым и принимаемым на стадии приемки ПУД',
             'Контроль определения СПИ программного обеспечения',
            'Контроль корректности проводок по учету доходов и расходов прошлых лет',
            'Контроль корректности, правомерности и своевременности отражения расходов на освоение природных ресурсов',
            'Контроль корректности отражения расчетов с контрагентами в учетной системе',
            'Контроль корректности и своевременности отражения в учетной системе финансового результата при выбытии объектов основных средств',
            'Контроль корректности расчета суммы нормируемых расходов',
            'Контроль корректности, правомерности и своевременности отражения доходов в виде безвозмездно полученного имущества (работ, услуг) или имущественных прав',
            'Контроль своевременности списания кредиторской задолженности',
            'Контроль корректности отражения убытка',
            'Контроль полноты и корректности определения объектов налогообложения по НДС',
            'Контроль полноты и корректности отражения исходящего НДС в учетной системе',
            'Контроль корректности и своевременности восстановления НДС',
            'Контроль корректности и правомерности отнесения операций к не облагаемым НДС',
            'Контроль корректности формирования выставленных счетов-фактур',
            'Контроль полноты и корректности отражения входящего НДС в учетной системе',
            'Контроль периода отнесения НДС к вычету',
            'Контроль корректности составления полученных счетов-фактур',
            'Контроль отнесения входящего НДС по видам деятельности, облагаемой НДС/ необлагаемой НДС',
            'Контроль распределения входящего НДС, относящегося одновременно к облагаемым и необлагаемым операциям',
            'Контроль корректности и своевременности принятия к вычету НДС, уплаченного таможенным органам при ввозе товаров на территорию РФ',
            'Контроль корректности исчисления НДС в качестве налогового агента',
            'Контроль полноты и корректности заполнения книги продаж',
            'Контроль полноты и корректности заполнения книги покупок',
            'Контроль полноты и корректности составления журнала выставленных/полученных счетов-фактур',
            'Контроль корректности классификации имущества в качестве недвижимого/движимого',
            'Контроль корректности определения даты принятия к учёту объектов ОС',
            'Контроль корректности учета недвижимого имущества',
            'Контроль корректности определения налоговой базы по налогу на имущество исходя из кадастровой стоимости',
            'Контроль корректности определения налоговых ставок по налогу на имущество',
            'Контроль полноты и правомерности применения федеральных и региональных льгот по налогу на имущество (освобождение, пониженная ставка)',
            'Контроль корректности и полноты определения объектов налогообложения по транспортному налогу',
            'Контроль корректности определения налоговой базы по транспортному налогу',
            'Контроль корректности определения налоговых ставок по транспортному налогу',
            'Контроль полноты и правомерности применения региональных льгот по транспортному налогу (освобождение, пониженная ставка)',
            'Контроль корректности определения объектов налогообложения по земельному налогу',
            'Контроль корректности определения налоговой базы по земельному налогу',
            'Контроль корректности определения налоговых ставок по земельному налогу',
            'Контроль полноты и правомерности применения федеральных и местных льгот по земельному налогу (освобождение, пониженная ставка)',
            'Контроль полноты и корректности определения объектов налогообложения по НДПИ',
            'Контроль корректности определения налоговой базы по НДПИ на нефть, газ, газовый конденсат',
            'Контроль корректности расчета налоговой ставки НДПИ на газ, газовый конденсат',
            'Контроль полноты и корректности определения объектов налогообложения водным налогом',
            'Контроль корректности определения налоговой базы по водному налогу',
            'Контроль корректности применения налоговой ставки водного налога',
            'Контроль корректности расчета заработной платы специалистами Бухгалтерии для целей удержания НДФЛ',
            'Контроль удержания НДФЛ при выплате сотрудникам дохода в виде материальной выгоды',
            'Контроль корректности определения налоговой базы по НДФЛ',
            'Контроль полноты и корректности применения налоговых вычетов по НДФЛ',
            'Контроль корректности применения ставки НДФЛ при налогообложении доходов нерезидентов',
            'Контроль полноты и корректности определения объектов обложения страховыми взносами',
            'Контроль корректности расчета заработной платы специалистами Бухгалтерии для целей обложения страховыми взносами',
            'Контроль корректности определения базы для начисления страховых взносов',
        ]


        codes3 = [
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
            'Чек-лист/Реестр объектов контроля',
        ]

        summary_df4 = pd.DataFrame({
            'Код КП(общий)': codes1,


        })



        # Обработка каждого загруженного файла
        for file in files:
            # Чтение первого листа файла и взятие только значений
            df1 = pd.read_excel(file, sheet_name='Sheet', usecols="A:K", header=None, skiprows=8, nrows=1)
            df1 = df1.set_axis(['номер п/п', 'Код КП(общий)', 'Код КП(промежуточный)', 'Наименование КП', 'Описание КП',
                                'Переодичность проведения', 'Способ подсчета результаты проведения КП',
                                'Подразделение, ответственное за проведение контрольной процедуры', 'Исполнитель КП',
                                'Количество выполненых КП', 'Количество выявленных ошибок', ], axis=1)

            # Получение имени файла без расширения
            file_name = os.path.splitext(file.name)[0]
            summary_df1['Количество контрольных процедур, не выявивших ошибки'] = summary_df1[
                                                                                      'Количество выполненых КП'] - \
                                                                                  summary_df1[
                                                                                      'Количество выявленных ошибок']

            # Добавление столбика "Документ" в DataFrame и заполнение его названием файла

            df1.drop(['Способ подсчета результаты проведения КП', 'Описание КП', 'Переодичность проведения'], axis=1,
                     inplace=True)
            df1 = df1.reset_index(drop=True)
            df1 = df1.rename_axis([None], axis=1)
            summary_df1 = pd.concat([summary_df1, df1], ignore_index=True)

            #summary_df1['филиал'] = 'Your Filial Value'
            #summary_df1.fillna(method='ffill', inplace=True)
            #summary_df1['филиал'] = summary_df1['филиал'].str.join('')

            # Вставка нового столбца на 9-ую позицию



            # Чтение второго листа файла и взятие только значений
            df2 = pd.read_excel(file, sheet_name='Sheet2', usecols="A:J", header=None, skiprows=3, nrows=5)
            df2 = df2.set_axis(['№ п/п', 'Код КП(промежуточный)', 'Исполнитель ИП', 'номер чек листа',
                                            'Объект контроля (договор, акт, счет-фактура, КС-2 и др.)',
                                            'Дата документа', 'Номер документа', 'Количество документов/операций',
                                            'Количество ошибок/нарушений', 'Примечание'], axis=1)

            ########################################
            sum_docs = df2['Количество документов/операций'].sum()
            sum_errors = df2['Количество ошибок/нарушений'].sum()

            # Создаем новый DataFrame с суммами

            ##########################################
            df2 = df2.reset_index(drop=True)
            df2 = df2.rename_axis([None], axis=1)
            summary_df2 = pd.concat([summary_df2, df2], ignore_index=True)





        merged_df = pd.merge(summary_df3, summary_df1[
            ['Код КП(общий)', 'Количество выполненых КП', 'Количество выявленных ошибок',]], on='Код КП(общий)',
                             how='left')
        merged_df['Количество выполненых КП'] = merged_df['Количество выполненых КП'].fillna(0)
        merged_df['Количество выявленных ошибок'] = merged_df['Количество выявленных ошибок'].fillna(0)


        merged_df = merged_df.groupby('Код КП(общий)').sum().reset_index()
        merged_df['филиал'] = ''

        merged_df = merged_df.set_index('Код КП(общий)').transpose()
        merged_df.insert(0, 'Количество', ['Количество выполненых КП', 'Количество выявленных ошибок', 'Количество контрольных процедур, не выявивших ошибки (отклонения, нарушения)'])


        merged_df.insert(0, 'Код БС', '')
        # Создание нового файла Excel с двумя листами


        ################################################
        merged_df1 = pd.merge(summary_df4, summary_df1[
            ['Код КП(общий)', 'Количество выполненых КП', 'Количество выявленных ошибок', ]], on='Код КП(общий)',
                             how='left')
        merged_df1['Количество выполненых КП'] = merged_df1['Количество выполненых КП'].fillna(0)
        merged_df1['Количество выявленных ошибок'] = merged_df1['Количество выявленных ошибок'].fillna(0)

        merged_df1['Количество контрольных процедур, не выявивших ошибки'] = merged_df1[
                                                                                  'Количество выполненых КП'] - \
                                                                              merged_df1[
                                                                                  'Количество выявленных ошибок']

        merged_df1 = merged_df1.groupby('Код КП(общий)').sum().reset_index()
        merged_df1['Документ, подтверждающий проведение контрольной процедуры'] = 'Чек-лист/Реестр объектов контроля'

        merged_df1.insert(0, '№ п/п', range(1, 81))

        merged_df1['Наименование КП'] = [
            'Контроль полноты и корректности определения объектов налогообложения водным налогом',
            'Контроль корректности определения налоговой базы по водному налогу',
            'Контроль корректности применения налоговой ставки водного налога',
             #*
            'Контроль корректности определения объектов налогообложения по земельному налогу',
            'Контроль корректности определения налоговой базы по земельному налогу',
            'Контроль корректности определения налоговых ставок по земельному налогу',
            'Контроль полноты и правомерности применения федеральных и местных льгот по земельному налогу (освобождение, пониженная ставка)',
            #*
            'Контроль полноты и корректности определения объектов налогообложения по НДПИ',
            'Контроль корректности определения налоговой базы по НДПИ на нефть, газ, газовый конденсат ',
            'Контроль корректности расчета налоговой ставки НДПИ на газ, газовый конденсат',
            #*


            'Контроль полноты и корректности определения объектов налогообложения по НДС',
            'Контроль полноты и корректности отражения исходящего НДС в учетной системе',
            'Контроль корректности и своевременности восстановления НДС',
            'Контроль корректности и правомерности отнесения операций к не облагаемым НДС',
            'Контроль корректности формирования выставленных счетов-фактур',
            'Контроль полноты и корректности отражения входящего НДС в учетной системе',
            'Контроль периода отнесения НДС к вычету',
            'Контроль корректности составления полученных счетов-фактур',
            'Контроль отнесения входящего НДС по видам деятельности, облагаемой НДС/ необлагаемой НДС',
            'Контроль распределения входящего НДС, относящегося одновременно к облагаемым и необлагаемым операциям',
            'Контроль корректности и своевременности принятия к вычету НДС, уплаченного таможенным органам при ввозе товаров на территорию РФ ',
            'Контроль корректности исчисления НДС в качестве налогового агента',
            'Контроль полноты и корректности заполнения книги продаж',
            'Контроль полноты и корректности заполнения книги покупок',
            'Контроль полноты и корректности составления журнала выставленных/полученных счетов-фактур',
            #*26


            'Контроль корректности расчета заработной платы специалистами Бухгалтерии для целей удержания НДФЛ',
            'Контроль удержания НДФЛ при выплате сотрудникам дохода в виде материальной выгоды',
            'Контроль корректности определения налоговой базы по НДФЛ ',
            'Контроль полноты и корректности применения налоговых вычетов по НДФЛ',
             'Контроль корректности применения ставки НДФЛ при налогообложении доходов нерезидентов',
            #*31


            'Контроль корректности классификации имущества в качестве недвижимого/движимого ',
            'Контроль корректности определения даты принятия к учёту объектов ОС',
            'Контроль корректности учета недвижимого имущества ',
            'Контроль корректности определения налоговой базы по налогу на имущество исходя из кадастровой стоимости',
            'Контроль корректности определения налоговых ставок по налогу на имущество',
            'Контроль полноты и правомерности применения федеральных и региональных льгот по налогу на имущество (освобождение, пониженная ставка)',
            #*32

            'Контроль отражения методологической позиции по налоговому учету хозяйственных операций в методологических документах компании',
            'Мониторинг изменений налогового законодательства',
            'Проверка полноты и достоверности ПУД',
            'Проверка корректности ПУД и осуществления проводки в учетной системе',
            'Проверка полноты и корректности внесения данных в НСИ',
            'Контроль полноты и корректности формирования деклараций (расчетов)',
            'Контроль представления отчетности в налоговый орган',
            'Контроль корректности исчисления суммы налогов, сборов, страховых взносов',
            'Контроль своевременности уплаты (перечисления) налогов, сборов, страховых взносов',
            'Контроль за соблюдением порядка и сроков хранения первичных учетных документов и регистров ',
            'Автоматизированная проверка корректности налоговых деклараций и контрольных соотношений показателей налоговой отчетности',
            #*48

            'Проверка экономической целесообразности сделки ',
            'Проверка контрагентов',
            'Экспертиза проектов договоров',
            'Контроль корректности формирования проводки в учетной системе',
            'Контроль за отражением в составе внереализационных доходов сумм доходов в виде штрафов, пеней и (или) иных санкций за нарушение договорных обязательств, а также сумм возмещения убытков или ущерба',
            'Проверка своевременности проведения арендной платы по договорам аренды ОС ',
            'Контроль списания безнадежного долга',
            'Контроль полноты и корректности отражения в учетной системе проводок поступления объекта',
            'Проверка акта на ввод в эксплуатацию / акта приема-передачи ОС',
            'Контроль корректности отражения в карточке ОС данных об ОС',
            'Контроль корректности расчета амортизации для целей налогового учета',
            'Автоматизированный контроль корректности и своевременности признания амортизационной премии в составе расходов',
            'Контроль корректности, правомерности и своевременности признания амортизационной премии в составе расходов',
            'Автоматизированный контроль корректности, правомерности и своевременности отражения в налоговом учете восстановления амортизационной премии',
            'Квалификация операций в качестве текущего ремонта/ капитального ремонта / реконструкции / модернизации / технического перевооружения',
            'Контроль правильности квалификации операций в качестве капитального ремонта / реконструкции / модернизации / технического перевооружения',
            'Ручной контроль корректности и правомерности отражения расходов по оплате труда в налоговом учете',
            'Контроль отнесения расходов к непринимаемым и принимаемым на стадии приемки ПУД',
            'Контроль определения СПИ программного обеспечения',
            'Контроль корректности проводок по учету доходов и расходов прошлых лет',
            'Контроль корректности, правомерности и своевременности отражения расходов на освоение природных ресурсов',
            'Контроль корректности отражения расчетов с контрагентами в учетной системе',
            'Контроль корректности и своевременности отражения в учетной системе финансового результата при выбытии объектов основных средств',
            'Контроль корректности расчета суммы нормируемых расходов',
            'Контроль корректности, правомерности и своевременности отражения доходов в виде безвозмездно полученного имущества (работ, услуг) или имущественных прав',
            'Контроль своевременности списания кредиторской задолженности',
            'Контроль корректности отражения убытка',
            #
            'Контроль полноты и корректности определения объектов обложения страховыми взносами',
            'Контроль корректности расчета заработной платы специалистами Бухгалтерии для целей обложения страховыми взносами',
            'Контроль корректности определения базы для начисления страховых взносов',
            #
            'Контроль корректности и полноты определения объектов налогообложения по транспортному налогу',
            'Контроль корректности определения налоговой базы по транспортному налогу',
            'Контроль полноты и правомерности применения региональных льгот по транспортному налогу (освобождение, пониженная ставка)'
            'Контроль корректности определения налоговых ставок по транспортному налогу ',

        ]





        with pd.ExcelWriter('summary.xlsx', engine='openpyxl') as writer:
            summary_df1.to_excel(writer, sheet_name='Sheet', index=False)
            summary_df2.to_excel(writer, sheet_name='Sheet2', index=False)

            merged_df.to_excel(writer, sheet_name='Sheet3', index=False)
            merged_df1.to_excel(writer, sheet_name='Sheet4', index=False)


            # Получение объекта workbook
            workbook = writer.book

            # Получение объекта worksheet для первого листа
            worksheet1 = writer.sheets['Sheet']
            #worksheet1.merge_cells('J14:J30')

            num_rows = summary_df1.shape[0]

            # Установка границ объединения ячеек





            values = ['АУП', 'Югорское УМТС и К', 'УОВОФ', 'Надымское УАВР', 'Югорское УАВР', 'Белоярское УАВР',
                      'Надымское УТТиСТ', 'Югорское УТТиСТ', 'Белоярское УТТиСТ', 'ИТЦ',
                      'Учебно-производственный центр', 'УЭЗ и С', 'Управление связи', 'Бобровское ЛПУ', 'Верхнеказымское ЛПУ', 'Ивдельское ЛПУ', 'Казымское ЛПУ',
                      'Карпинское ЛПУ', 'Комсомольское ЛПУ', 'Краснотурьинское ЛПУ',
                      'Лонг-Юганское ЛПУ', 'Надымское ЛПУ', 'Нижнетуринское ЛПУ', 'Ново-Уренгойское ЛПУ', 'Ныдинское ЛПУ', 'Октябрьское ЛПУ', 'Пангодинское ЛПУ'
                      'Пелымское ЛПУ', 'Перегребненское ЛПУ', 'Правохеттинское ЛПУ', 'Приозерное ЛПУ', 'Пунгинское ЛПУ', 'Сорумское ЛПУ', 'Сосновское ЛПУ',
                      'Таежное ЛПУ', 'Уральское ЛПУ', 'Ягельное ЛПУ', 'Ямбургское ЛПУ', 'Санаторий-профилакторий', 'КСК Норд'
                      ]

            # Создаем объект DataValidation
            data_validation = DataValidation(type="list", formula1='"{}"'.format(','.join(values)))

            # Применяем DataValidation к нужным ячейкам (например, H3 и I3)
            worksheet1.add_data_validation(data_validation)
            data_validation.add(worksheet1['D3'])

            values2 = ['За Декабрь 2023г', 'За Январь 2023г', 'За Февраль 2023г', 'За Март 2023г', 'За Апрель 2023г', 'За Май 2023г',
                      'За Июнь 2023г', 'За Июль 2023г', 'За Август 2023г', 'За Сентябрь 2023г',
                      'За Октябрь 2023г', 'За Ноябрь 2023г',
                      ]

            # Создаем объект DataValidation
            data_validation = DataValidation(type="list", formula1='"{}"'.format(','.join(values2)))

            # Применяем DataValidation к нужным ячейкам (например, H3 и I3)
            worksheet1.add_data_validation(data_validation)
            data_validation.add(worksheet1['D7'])

            # Запись значения по умолчанию в ячейку B2


            # Сохранение файла Excel
            table_end_row = worksheet1.max_row



            worksheet1.delete_cols(5, 3)  # Удаление столбиков с индексами 5, 6 и 7
            worksheet1.insert_rows(1, 12)  # Опускание таблицы на 12 строк ниже начиная с первой строки


            last_row = worksheet1.max_row
            sum_formula = f"=SUM(G1:G{last_row})"
            worksheet1.cell(row=last_row + 1, column=7).value = sum_formula

            last_row1 = worksheet1.max_row
            sum_formula1 = f"=SUM(H1:H{last_row})"
            worksheet1.cell(row=last_row1 + 0, column=8).value = sum_formula1

            last_row2 = worksheet1.max_row
            sum_formula1 = f"=SUM(I1:I{last_row})"
            worksheet1.cell(row=last_row2 + 0, column=9).value = sum_formula1

            last_row3 = worksheet1.max_row
            sum_formula1 = " "
            worksheet1.cell(row=last_row3 + 0, column=10).value = sum_formula1

            last_row2 = worksheet1.max_row
            sum_formula1 = "Итого:"
            worksheet1.cell(row=last_row2 + 0, column=6).value = sum_formula1


            worksheet1.cell(row=1, column=4).value = "Сводный реестр контрольных процедур"
            worksheet1.cell(row=1, column=4).font = Font(bold=True)
            worksheet1.cell(row=2, column=4).value = " "
            worksheet1.cell(row=3, column=4).value = "_____________________________________"
            worksheet1.cell(row=3, column=4).value = "Выберите филиал"
            worksheet1.cell(row=3, column=4).font = Font(bold=True)

            worksheet1.cell(row=4, column=4).value = "наименование филиала/отдела)"
            worksheet1.cell(row=6, column=4).value = "осуществляемых в целях налогового мониторинга"
            worksheet1.cell(row=6, column=4).font = Font(bold=True)
            worksheet1.cell(row=7, column=4).value = "________________________________"



            #worksheet1.cell(row=table_end_row + 15, column=2).value = "________________________________"
            #worksheet1.cell(row=table_end_row + 15, column=4).value = "________________________________"
            #worksheet1.cell(row=table_end_row + 15, column=6).value = "________________________________"

            #worksheet1.cell(row=table_end_row + 16, column=2).value = "должность"
            #worksheet1.cell(row=table_end_row + 16, column=4).value = "подпись"
            #cell = worksheet1.cell(row=table_end_row + 16, column=6)
            #cell.value = "ФИО"
            #cell.alignment = Alignment(horizontal='left')


            workbook.save("example.xlsx")


            # Автоматическое расширение столбцов для первог о листа
            for row in range(worksheet1.max_row, 0, -1):
                max_length = 0
                for cell in worksheet1[row]:
                    if len(str(cell.value)) > max_length:
                        max_length = len(str(cell.value))
                worksheet1.row_dimensions[row].height = max_length

                for column_cells in worksheet1.columns:
                    length = max(len(str(cell.value)) for cell in column_cells)
                    worksheet1.column_dimensions[column_cells[0].column_letter].width = length

                # Установка выравнивания для каждой ячейки в строке
                for cell in worksheet1[row]:
                    cell.alignment = Alignment(horizontal='centerContinuous', vertical='center', wrap_text=True)

                # Установка выравнивания для каждой ячейки в строке



                # Установка выравнивания для каждой ячейки в строке
            # Получение объекта worksheet для второго листа
            worksheet2 = writer.sheets['Sheet2']
            # Опускание таблицы на 2 строк ниже начиная с первой строки
            worksheet2.insert_rows(1, 2)
            worksheet2.cell(row=2, column=5).value = "                        Реестр обьектов контроля"
            worksheet2.cell(row=2, column=5).font = Font(bold=True)

            # Определение последней строки для столбца I
            last_row = worksheet2.max_row
            sum_formula = f"=SUM(I1:I{last_row})"
            worksheet2.cell(row=last_row + 1, column=9).value = sum_formula

            last_row1 = worksheet2.max_row
            sum_formula1 = f"=SUM(H1:H{last_row})"
            worksheet2.cell(row=last_row1 + 0, column=8).value = sum_formula1

            last_row2 = worksheet2.max_row
            sum_formula1 = "Итого:"
            cell = worksheet2.cell(row=last_row2 + 0, column=7)
            cell.value = sum_formula1
            cell.alignment = Alignment(horizontal='right')

            # Автоматическое расширение столбцов для второго листа
            for column_cells in worksheet2.columns:
                length = max(len(str(cell.value)) for cell in column_cells)
                worksheet2.column_dimensions[column_cells[0].column_letter].width = length



                for cell in worksheet2[row]:
                    cell.alignment = Alignment(horizontal='centerContinuous', vertical='center', wrap_text=True)


            # Получение объекта worksheet для третьего листа
            worksheet3 = writer.sheets['Sheet3']

            values3 = ['За Декабрь 2023г', 'За Январь 2023г', 'За Февраль 2023г', 'За Март 2023г', 'За Апрель 2023г', 'За Май 2023г',
                      'За Июнь 2023г', 'За Июль 2023г', 'За Август 2023г', 'За Сентябрь 2023г',
                      'За Октябрь 2023г', 'За Ноябрь 2023г',
                      ]

            # Создаем объект DataValidation
            data_validation = DataValidation(type="list", formula1='"{}"'.format(','.join(values3)))

            # Применяем DataValidation к нужным ячейкам (например, H3 и I3)
            worksheet3.add_data_validation(data_validation)
            data_validation.add(worksheet3['D5'])

            worksheet3.insert_rows(1, 7)

            # Удаление столбиков с индексами 5, 6 и 7




            worksheet3.cell(row=3, column=4).value = "Осуществляемых в целях налогового мониторинга"
            worksheet3.cell(row=3, column=4).font = Font(bold=True)
            worksheet3['C11'] = '=C9-C10'
            worksheet3['D11'] = '=D9-D10'
            worksheet3['E11'] = '=E9-E10'
            worksheet3['F11'] = '=F9-F10'
            worksheet3['G11'] = '=G9-G10'
            worksheet3['H11'] = '=H9-H10'
            worksheet3['I11'] = '=I9-I10'
            worksheet3['J11'] = '=J9-J10'
            worksheet3['K11'] = '=K9-K10'
            worksheet3['L11'] = '=L9-L10'
            worksheet3['M11'] = '=M9-M10'
            worksheet3['N11'] = '=N9-N10'
            worksheet3['O11'] = '=O9-O10'
            worksheet3['P11'] = '=P9-P10'
            worksheet3['Q11'] = '=Q9-Q10'
            worksheet3['R11'] = '=R9-R10'
            worksheet3['S11'] = '=S9-S10'
            worksheet3['T11'] = '=T9-T10'
            worksheet3['U11'] = '=U9-U10'
            worksheet3['V11'] = '=V9-V10'
            worksheet3['W11'] = '=W9-W10'
            worksheet3['X11'] = '=X9-X10'
            worksheet3['Y11'] = '=Y9-Y10'
            worksheet3['Z11'] = '=Z9-Z10'
            worksheet3['AA11'] = '=AA9-AA10'
            worksheet3['AB11'] = '=AB9-AB10'
            worksheet3['AC11'] = '=AC9-AC10'
            worksheet3['AD11'] = '=ADB9-AD10'
            worksheet3['AE11'] = '=AE9-AE10'
            worksheet3['AF11'] = '=AF9-AF10'
            worksheet3['AG11'] = '=AG9-AG10'
            worksheet3['AH11'] = '=AH9-AH10'
            worksheet3['AH11'] = '=AH9-AH10'
            worksheet3['AI11'] = '=AI9-AI10'
            worksheet3['AJ11'] = '=AJ9-AJ10'
            worksheet3['AK11'] = '=AK9-AK10'
            worksheet3['AL11'] = '=AL9-AL10'
            worksheet3['AM11'] = '=AM9-AM10'
            worksheet3['AN11'] = '=AN9-AN10'
            worksheet3['AO11'] = '=AO9-AO10'
            worksheet3['AP11'] = '=AP9-AP10'
            worksheet3['AQ11'] = '=AQ9-AQ10'
            worksheet3['AR11'] = '=AR9-AR10'
            worksheet3['AS11'] = '=AS9-AS10'
            worksheet3['AT11'] = '=AT9-AT10'
            worksheet3['AU11'] = '=AU9-AU10'
            worksheet3['AV11'] = '=AV9-AV10'
            worksheet3['AW11'] = '=AW9-AW10'
            worksheet3['AX11'] = '=AX9-AX10'
            worksheet3['AZ11'] = '=AZ9-AZ10'
            worksheet3['AY11'] = '=AY9-AY10'
            worksheet3['BA11'] = '=BA9-BA10'
            worksheet3['BB11'] = '=BB9-BB10'
            worksheet3['BC11'] = '=BC9-BC10'
            worksheet3['BD11'] = '=BD9-BD10'
            worksheet3['BE11'] = '=BE9-BE10'
            worksheet3['BF11'] = '=BF9-BF10'
            worksheet3['BG11'] = '=BG9-BG10'
            worksheet3['BH11'] = '=BH9-BH10'
            worksheet3['BI11'] = '=BI9-BI10'
            worksheet3['BJ11'] = '=BJ9-BJ10'
            worksheet3['BK11'] = '=BK9-BK10'
            worksheet3['BL11'] = '=BL9-BL10'
            worksheet3['BM11'] = '=BM9-BM10'
            worksheet3['BN11'] = '=BN9-BN10'
            worksheet3['BO11'] = '=BO9-BO10'
            worksheet3['BP11'] = '=BP9-BP10'
            worksheet3['BQ11'] = '=BQ9-BQ10'
            worksheet3['BR11'] = '=BR9-BR10'
            worksheet3['BS11'] = '=BS9-BS10'
            worksheet3['BT11'] = '=BT9-BT10'
            worksheet3['BU11'] = '=BU9-BU10'
            worksheet3['BV11'] = '=BV9-BV10'
            worksheet3['BW11'] = '=BW9-BW10'
            worksheet3['BX11'] = '=BX9-BX10'
            worksheet3['BY11'] = '=BY9-BY10'
            worksheet3['BZ11'] = '=BZ9-BZ10'
            worksheet3['CA11'] = '=CA9-CA10'
            worksheet3['CB11'] = '=CB9-CB10'
            worksheet3['CB11'] = '=CB9-CB10'
            worksheet3['CC11'] = '=CC9-CC10'

            worksheet3.insert_cols(84)
            worksheet3.cell(row=8, column=82).value = "Итого"

            sum_formula1 = f"=SUM(D9:CC9)"
            worksheet3.cell(row=9, column=82).value = sum_formula1

            sum_formula1 = f"=SUM(D10:CC10)"
            worksheet3.cell(row=10, column=82).value = sum_formula1

            sum_formula1 = f"=SUM(D11:CC11)"
            worksheet3.cell(row=11, column=82).value = sum_formula1

            # last_row2 = worksheet3.max_row
            # sum_formula1 = f"=SUM(D3:CD3)"
            # worksheet3.cell(row=3, column=3).value = sum_formula1

            # last_row2 = worksheet3.max_row
            # sum_formula1 = f"=SUM(D4:CD4)"
            # worksheet3.cell(row=4, column=3).value = sum_formula1

            # last_row2 = worksheet3.max_row
            # sum_formula1 = f"=SUM(D5:CD5)"
            # worksheet3.cell(row=5, column=3).value = sum_formula1

            # last_row2 = worksheet3.max_row
            # sum_formula1 = f"=SUM(D6:CD6)"
            # worksheet3.cell(row=6, column=3).value = sum_formula1

            # last_row2 = worksheet3.max_row
            # sum_formula1 = f"=SUM(D7:CD7)"
            # worksheet3.cell(row=7, column=3).value = sum_formula1

            #last_row = worksheet3.max_row
            #sum_formula = f"=SUM(B1:D{last_row})"
            #worksheet3.cell(row=last_row + 1, column=2).value = sum_formula

            #last_row1 = worksheet3.max_row
            #sum_formula1 = f"=SUM(C1:E{last_row})"
            #worksheet3.cell(row=last_row1 + 0, column=3).value = sum_formula1

            #last_row2 = worksheet3.max_row
            #sum_formula1 = "Итого:"
            #cell = worksheet3.cell(row=last_row2 + 0, column=1)
            #cell.value = sum_formula1
            #cell.alignment = Alignment(horizontal='right')

            #last_row2 = worksheet3.max_row
            #sum_formula1 = "."
            #cell = worksheet3.cell(row=last_row2 + 0, column=6)
            #cell.value = sum_formula1
            #cell.alignment = Alignment(horizontal='right')

            worksheet4 = writer.sheets['Sheet4']
            # После удаления столбка 4, столбок 6 станет столбком 7
            last_row = worksheet4.max_row
            sum_formula = "Итого:"
            worksheet4.cell(row=last_row + 1, column=2).value = sum_formula

            last_row1 = worksheet4.max_row
            sum_formula1 = f"=SUM(C1:C{last_row})"
            worksheet4.cell(row=last_row1 + 0, column=3).value = sum_formula1

            last_row2 = worksheet4.max_row
            sum_formula1 = f"=SUM(D1:D{last_row})"
            worksheet4.cell(row=last_row2 + 0, column=4).value = sum_formula1

            last_row2 = worksheet4.max_row
            sum_formula1 = f"=SUM(E1:E{last_row})"
            worksheet4.cell(row=last_row2 + 0, column=5).value = sum_formula1

            # Автоматическое расширение столбцов для второго листа





        file_path = 'summary.xlsx'  # Путь к файлу
        with open(file_path, 'rb') as file:
            response = HttpResponse(file.read(), content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            response['Content-Disposition'] = 'attachment; filename=summary.xlsx'
            return response

    return render(request, 'svod.html')  # Отображение шаблона "upload.html".


def base(request):
    if request.method == 'POST':
        # Получаем данные из формы, введенные в админке
        column1_data = request.POST.get('column1')
        column2_data = request.POST.get('column2')
        column3_data = request.POST.get('column3')
        column4_data = request.POST.get('column4')
        column5_data = request.POST.get('column5')
        column6_data = request.POST.get('column6')
        column7_data = request.POST.get('column7')
        column8_data = request.POST.get('column8')
        column9_data = request.POST.get('column9')
        column10_data = request.POST.get('column10')
        column11_data = request.POST.get('column11')
        column12_data = request.POST.get('column12')
        column13_data = request.POST.get('column13')
        column14_data = request.POST.get('column14')
        column15_data = request.POST.get('column15')

        # Создаем новый объект модели Columns с введенными данными
        new_column = Columns(column1=column1_data, column2=column2_data, column3=column3_data,
                             column4=column4_data, column5=column5_data, column6=column6_data,
                             column7=column7_data, column8=column8_data, column9=column9_data,
                             column10=column10_data,
                             column11=column11_data, column12=column12_data, column13=column13_data, column14=column14_data, column15=column15_data,
                             )
        new_column.save()

    # Получаем все объекты модели Columns
    columns = Columns.objects.all()
    return render(request, 'tables.html', {'columns': columns})


def checklist_detail(request, pk):
    checklist = get_object_or_404(CheckList, pk=pk)
    columns = CheckList.objects.all()
    if request.method == 'POST':
        form = CheckListForm(request.POST, instance=checklist)
        if form.is_valid():
            form.save()
            return redirect('checklist_detail', pk=checklist.pk)
    else:
        form = CheckListForm(instance=checklist)
    # Создание нового файла Excel
    workbook = Workbook()
    worksheet = workbook.active
    # Запись заголовков таблицы
    headers = ['номер п/п', 'Код КП(общий)', 'Код КП(промежуточный)', 'Наименование ИП', 'Описание КП', 'Переодичность проведения',
               'Способ подсчета результаты проведения КП', 'Подразделение, ответственное за проведение контрольной процедуры',
               'Исполнитель КП', 'Количество выполненых КП', 'Количество выявленных ошибок']
    for col_num, header in enumerate(headers, 1):
        cell = worksheet.cell(row=1, column=col_num)
        cell.value = header
    # Запись данных из базы данных в таблицу
    for row_num, column in enumerate(columns, 2):
        worksheet.cell(row=row_num, column=1).value = column.number
        worksheet.cell(row=row_num, column=2).value = column.cod_kp_overall
        worksheet.cell(row=row_num, column=3).value = column.cod_kp_intervall
        worksheet.cell(row=row_num, column=4).value = column.name_ip
        worksheet.cell(row=row_num, column=5).value = column.description_ip
        worksheet.cell(row=row_num, column=6).value = column.pereodiction_carriage
        worksheet.cell(row=row_num, column=7).value = column.counting_abillity
        worksheet.cell(row=row_num, column=8).value = column.responsible_group
        worksheet.cell(row=row_num, column=9).value = column.perforemr_kp
        worksheet.cell(row=row_num, column=10).value = column.number_complete
        worksheet.cell(row=row_num, column=11).value = column.number_mistakes
#        worksheet.cell(row=row_num, column=12).value = column.data_object
    # Сохранение файла Excel



    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename=checklist.xlsx'
    workbook.save(response)
    return response


def edit_reestr(request, pk):
    reestr = get_object_or_404(Reestr, pk=pk)
    columns = Reestr.objects.all()  # Получение всех объектов Column
    if request.method == 'POST':
        form = ReestrForm(request.POST, instance=reestr)
        if form.is_valid():
            form.save()
            return redirect('edit_reestr', pk=reestr.pk)
    else:
        form = ReestrForm(instance=reestr)
    return render(request, 'reestr.html', {'reestr': reestr,'form': form, 'columns': columns })


def indexx(request):
    if request.method == 'POST':
        num_rows = int(request.POST['num_rows'])
        columns = []

        for i in range(num_rows):
            column = {
                'num': request.POST.get(f'num_{i}'),
                'cod_kp_inter': request.POST.get(f'cod_kp_inter_{i}'),
                'chek_num': request.POST.get(f'chek_num_{i}'),
                'obj_control': request.POST.get(f'obj_control_{i}'),
                'date_document': request.POST.get(f'date_document_{i}'),
                'num_document': request.POST.get(f'num_document_{i}'),
                'colvo_doc': request.POST.get(f'colvo_doc_{i}'),
                'colvo_errors': request.POST.get(f'colvo_errors_{i}'),
                'notes': request.POST.get(f'notes_{i}')
            }
            columns.append(column)

        # Создаем новый Excel-файл и заполняем его данными из таблицы
        workbook = Workbook()
        sheet = workbook.active



def download_excel(request, pk):
    from openpyxl import Workbook
    from openpyxl.styles import Border, Side
    from django.shortcuts import get_object_or_404
    from django.http import HttpResponse
    from openpyxl.styles import Alignment
    from openpyxl import Workbook
    from openpyxl.comments import Comment


    checklist1 = get_object_or_404(CheckList, pk=pk)
    checklist2 = get_object_or_404(Reestr, pk=pk)


    workbook = Workbook()
    # Запись данных из базы данных в таблицу
    worksheet1 = workbook.active



    # Задаем список значений для выпадающего списка
    values = ['АУП', 'Югорское УМТС и К', 'УОВОФ', 'Надымское УАВР', 'Югорское УАВР', 'Белоярское УАВР',
                      'Надымское УТТиСТ', 'Югорское УТТиСТ', 'Белоярское УТТиСТ', 'ИТЦ',
                      'Учебно-производственный центр', 'УЭЗ и С', 'Управление связи', 'Бобровское ЛПУ',
                      'Верхнеказымское ЛПУ', 'Ивдельское ЛПУ', 'Казымское ЛПУ',
                      'Карпинское ЛПУ', 'Комсомольское ЛПУ', 'Краснотурьинское ЛПУ',
                      'Лонг-Юганское ЛПУ', 'Надымское ЛПУ', 'Нижнетуринское ЛПУ', 'Ново-Уренгойское ЛПУ',
                      'Ныдинское ЛПУ', 'Октябрьское ЛПУ', 'Пангодинское ЛПУ'
                      'Пелымское ЛПУ', 'Перегребненское ЛПУ', 'Правохеттинское ЛПУ', 'Приозерное ЛПУ',
                      'Пунгинское ЛПУ', 'Сорумское ЛПУ', 'Сосновское ЛПУ',
                      'Таежное ЛПУ', 'Уральское ЛПУ', 'Ягельное ЛПУ', 'Ямбургское ЛПУ', 'Санаторий-профилакторий', 'КСК Норд'
              ]

    # Создаем объект DataValidation
    data_validation = DataValidation(type="list", formula1='"{}"'.format(','.join(values)))

    # Применяем DataValidation к нужным ячейкам (например, H3 и I3)
    worksheet1.add_data_validation(data_validation)
    data_validation.add(worksheet1['H3'])

    values2 = ['Декабрь', 'Январь', 'Февраль', 'Март', 'Апрель',
               'Май',
               'Июнь', 'Июль', 'Август', 'Сентябрь',
               'Октябрь', 'Ноябрь',
               ]

    # Создаем объект DataValidation
    data_validation = DataValidation(type="list", formula1='"{}"'.format(','.join(values2)))

    # Применяем DataValidation к нужным ячейкам (например, H3 и I3)
    worksheet1.add_data_validation(data_validation)
    data_validation.add(worksheet1['F7'])
    worksheet1['F7'].alignment = openpyxl.styles.Alignment(horizontal='center', vertical='center', wrap_text=True)

    #data_validation.add(worksheet1['I3'])

    values2 = ['2022г', '2023г', '2024г', '2025г', '2026г',
               '2027г',
               '2028г', '2029г', '2030г'
               ]

    # Создаем объект DataValidation
    data_validation = DataValidation(type="list", formula1='"{}"'.format(','.join(values2)))

    # Применяем DataValidation к нужным ячейкам (например, H3 и I3)
    worksheet1.add_data_validation(data_validation)
    data_validation.add(worksheet1['G7'])

    worksheet1['G7'].alignment = openpyxl.styles.Alignment(horizontal='center', vertical='center', wrap_text=True)


    workbook.save('example.xlsx')

    worksheet1.cell(row=9, column=1).value = checklist1.number
    worksheet1.merge_cells('A8')
    worksheet1['A8'] = 'номер п/п'
    worksheet1['A8'].alignment = openpyxl.styles.Alignment(horizontal='center', vertical='center', wrap_text=True)

    worksheet1.cell(row=9, column=2).value = checklist1.cod_kp_overall
    worksheet1.merge_cells('B8')
    worksheet1['B8'] = 'Код КП(общий)'
    worksheet1['B8'].alignment = openpyxl.styles.Alignment(horizontal='center', vertical='center', wrap_text=True)

    worksheet1.cell(row=9, column=3).value = checklist1.cod_kp_intervall
    worksheet1.merge_cells('C8')
    worksheet1['C8'] = 'Код КП(Промежуточный)'
    worksheet1['C8'].alignment = openpyxl.styles.Alignment(horizontal='center', vertical='center', wrap_text=True)

    worksheet1.cell(row=9, column=4).value = checklist1.name_ip
    worksheet1.merge_cells('D5')
    worksheet1['D8'] = 'Наименования КП'
    worksheet1['D8'].alignment = openpyxl.styles.Alignment(horizontal='center', vertical='center', wrap_text=True)

    worksheet1.cell(row=9, column=5).value = checklist1.description_ip
    worksheet1.merge_cells('E8')
    worksheet1['E8'] = 'Описание КП'
    worksheet1['E8'].alignment = openpyxl.styles.Alignment(horizontal='center', vertical='center', wrap_text=True)

    worksheet1.cell(row=9, column=6).value = checklist1.pereodiction_carriage
    worksheet1.merge_cells('F8')
    worksheet1['F8'] = 'Периодичность проведения (ежедневно/ ежеквартально/ежемесячно/по мере поступления и т.д)'
    worksheet1['F8'].alignment = openpyxl.styles.Alignment(horizontal='center', vertical='center', wrap_text=True)

    worksheet1.cell(row=9, column=7).value = checklist1.counting_abillity
    worksheet1.merge_cells('G8')
    worksheet1['G8'] = 'Способ подсчета результаты  проведения КП (ручной/автоматизированный)'
    worksheet1['G8'].alignment = openpyxl.styles.Alignment(horizontal='center', vertical='center', wrap_text=True)

    worksheet1.cell(row=9, column=8).value = checklist1.responsible_group
    worksheet1.merge_cells('H8')
    worksheet1['H8'] = 'Подразделение, ответственное за выполнение контрольной процедуры'
    worksheet1['H8'].alignment = openpyxl.styles.Alignment(horizontal='center', vertical='center', wrap_text=True)

    worksheet1.cell(row=9, column=9).value = checklist1.perforemr_kp
    worksheet1.merge_cells('I8')
    worksheet1['I8'] = 'Исполнитель КП (ФИО)'
    worksheet1['I8'].alignment = openpyxl.styles.Alignment(horizontal='center', vertical='center', wrap_text=True)

#    worksheet1.cell(row=9, column=10).value = checklist1.number_complete   =Sheet2!H24
    worksheet1.cell(row=9, column=10).value = "=Sheet2!H24"
    worksheet1.merge_cells('J8')
    worksheet1['J8'] = 'Количество выполненных КП'
    worksheet1['J8'].alignment = openpyxl.styles.Alignment(horizontal='center', vertical='center', wrap_text=True)

#    worksheet1.cell(row=9, column=11).value = checklist1.number_mistakes  =Sheet2!I24
    worksheet1.cell(row=9, column=11).value = "=Sheet2!I24"
    worksheet1.merge_cells('K8')
    worksheet1['K8'] = 'Количество выявленных ошибок/ нарушений'
    worksheet1['K8'].alignment = openpyxl.styles.Alignment(horizontal='center', vertical='center', wrap_text=True)

    #worksheet1.cell(row=3, column=7).value = checklist1.filial
    #worksheet1.merge_cells('H3')
    #worksheet1['H3'] = 'Филиал'
    #worksheet1['H3'].alignment = openpyxl.styles.Alignment(horizontal='center', vertical='center', wrap_text=True)

    # Создание стиля границы
    border_style = Border(left=Side(border_style="thin", color="000000"),
                          right=Side(border_style="thin", color="000000"),
                          top=Side(border_style="thin", color="000000"),
                          bottom=Side(border_style="thin", color="000000")
                          )

    # Автоматическое расширение столбцов
    for column in worksheet1.columns:
        max_length = 15
        column_letter = get_column_letter(column[8].column)
        for cell in column:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(cell.value)

            except:
                pass
        adjusted_width = 20
        worksheet1.column_dimensions[column_letter].width = adjusted_width


    for row in worksheet1.rows:
        max_length = 1500
        for cell in row:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(cell.value)
            except:
                pass
        adjusted_height = 250
        alignment = Alignment(horizontal='centerContinuous', vertical='center', wrap_text=True)

        for cell in worksheet1[row[8].column]:
            worksheet1.row_dimensions[cell.row].height = adjusted_height
            cell.alignment = alignment


    # Сохранение файла
    workbook.save('example.xlsx')




    # Применение стиля границы к ячейкам
    for i in range(1, 8):
        for column in worksheet1.iter_cols(min_row=8, max_row=9, min_col=i, max_col=i + 4):
            for cell in column:
                cell.border = border_style

    worksheet1.cell(row=20, column=1).value = "Дата:"
    worksheet1.cell(row=14, column=2).value = "_____________________"
    worksheet1.cell(row=15, column=2).value = "            (должность)"
    worksheet1.cell(row=14, column=4).value = "_____________________"
    worksheet1.cell(row=15, column=4).value = "             (подпись)"
    worksheet1.cell(row=14, column=6).value = "_____________________"
    worksheet1.cell(row=15, column=6).value = "                (ФИО)"
    #worksheet1.cell(row=14, column=8).value = "______________________"
    #worksheet1.cell(row=15, column=8).value = "                (дата)"
    #worksheet1.cell(row=3, column=8).value = "_____________________________________"
    worksheet1.cell(row=4, column=8).value = "(наименование филиала)"
    worksheet1.cell(row=2, column=11).value = "____________________"
    worksheet1.cell(row=3, column=11).value = "   Код отдела/службы"
    worksheet1.cell(row=7, column=5).value = "          Чек-лист за"
    worksheet1.cell(row=7, column=5).font = worksheet1.cell(row=7, column=5).font.copy(bold=True)
    worksheet1.cell(row=7, column=6).value = " "
    worksheet1.cell(row=7, column=6).font = worksheet1.cell(row=7, column=6).font.copy(bold=True)
    worksheet1.cell(row=7, column=7).value = "            2023г."
    worksheet1.cell(row=7, column=7).font = worksheet1.cell(row=7, column=7).font.copy(bold=True)
    worksheet1.cell(row=3, column=8).value = "Выберите филиал"
    worksheet1.cell(row=1, column=1).value = f'=СЦЕПИТЬ(B9;I9;H14)'




    worksheet2 = workbook.create_sheet(title='Sheet2')

    # Запись заголовков таблицы
    headers2 = ['№ п/п', 'Код КП(промежуточный)', 'Исполнитель ИП', 'номер чек листа',
               'Объект контроля (договор, акт, счет-фактура, КС-2 и др.)', 'Дата документа',
               'Номер документа',
               'Количество документов/операций',
               'Количество ошибок/нарушений',
               'Примечание',

               ]
    for col_num, header in enumerate(headers2, 1):
        cell = worksheet2.cell(row=3, column=col_num)
        cell.value = header


    # Запись данных из базы данных в таблицу
    worksheet2.cell(row=4, column=1).value = checklist2.num

    worksheet2.cell(row=4, column=2).value = checklist2.cod_kp_inter
    #    worksheet.merge_cells('B3')
    #    worksheet['B3'] = 'Код КП(промежуточный)'
    #    worksheet['B3'].alignment = openpyxl.styles.Alignment(horizontal='center', vertical='center', wrap_text=True)
    cell.alignment = Alignment(wrap_text=True)
    worksheet2.cell(row=4, column=3).value ="=Sheet!I9"

    worksheet2.cell(row=4, column=4).value = checklist2.chek_num
    worksheet2.cell(row=4, column=5).value = checklist2.obj_control
    worksheet2.cell(row=4, column=6).value = checklist2.date_document
    worksheet2.cell(row=4, column=7).value = checklist2.num_document
    worksheet2.cell(row=4, column=8).value = checklist2.colvo_doc


    last_row1 = worksheet2.max_row
    sum_formula1 = f"=SUM(H1:H23)"
    worksheet2.cell(row=last_row1 + 20, column=8).value = sum_formula1
    worksheet2.cell(row=4, column=9).value = checklist2.colvo_errors

    # Задаем формулу суммирования
    last_row = worksheet2.max_row
    sum_formula = f"=SUM(I1:I23)"
    worksheet2.cell(row=last_row , column=9).value = sum_formula
    worksheet2.cell(row=4, column=8).value = checklist2.notes


    total_errors = 0  # Инициализация переменной для суммирования ошибок

    border_style = Border(left=Side(border_style="thin", color="000000"),
                          right=Side(border_style="thin", color="000000"),
                          top=Side(border_style="thin", color="000000"),
#                          bottom=Side(border_style="thin", color="000000")
                          )

    # Автоматическое расширение столбцов
    for column in worksheet2.columns:
        max_length = 0
        column_letter = get_column_letter(column[3].column)
        for cell in column:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(cell.value)
            except:
                pass
        adjusted_width = (max_length + 2)
        worksheet2.column_dimensions[column_letter].width = adjusted_width

    # Автоматическое расширение строк

    # Применение стиля границы к ячейкам
    for i in range(1, 8):
        for column in worksheet2.iter_cols(min_row=3, max_row=25, min_col=i, max_col=i + 3):
            for cell in column:
                cell.border = border_style

    # Установка значений для "Должность" и "Подпись"
    worksheet2.cell(row=2, column=5).value = "                      Реестр обьектов контроля"
    worksheet2.cell(row=2, column=5).font = worksheet2.cell(row=2, column=5).font.copy(bold=True)
    worksheet2.cell(row=28, column=2).value = "_________________________"
    worksheet2.cell(row=29, column=2).value = "               (должность)"
    #worksheet2.cell(row=28, column=4).value = "_______________________"
    #worksheet2.cell(row=29, column=4).value = "               (ФИО)"
    worksheet2.cell(row=28, column=6).value = "_________________"
    worksheet2.cell(row=29, column=6).value = "         (подпись)"



    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename=checklist.xlsx'
    workbook.save(response)

    return response



def on_change(worksheet1, worksheet2):
    worksheet2.cell(row=4, column=3).value = worksheet1.cell(row=4, column=3).value

# Вызов функции on_change при изменении значения в ячейке worksheet1.cell(row=4, column=3)
    worksheet1.cell(row=4, column=3).add_observer(on_change, worksheet1, worksheet2)


def download_excel1(request, pk):
    from openpyxl import Workbook
    from openpyxl.styles import Border, Side
    from django.shortcuts import get_object_or_404
    from django.http import HttpResponse
    checklist = get_object_or_404(Reestr, pk=pk)

    workbook = Workbook()
    worksheet = workbook.active

    # Запись заголовков таблицы
    headers = ['№ п/п', 'Код КП(промежуточный)', 'Исполнитель ИП', 'номер чек листа', 'Объект контроля (договор, акт, счет-фактура, КС-2 и др.)', 'Дата документа',
               'Номер документа',
               'Количество документов/операций',
               'Количество ошибок/нарушений',
               'Примечание',
               ]
    for col_num, header in enumerate(headers, 1):
        cell = worksheet.cell(row=3, column=col_num)
        cell.value = header

    # Запись данных из базы данных в таблицу
    worksheet.cell(row=4, column=1).value = checklist.num


    worksheet.cell(row=4, column=2).value = checklist.cod_kp_inter
#    worksheet.merge_cells('B3')
#    worksheet['B3'] = 'Код КП(промежуточный)'
#    worksheet['B3'].alignment = openpyxl.styles.Alignment(horizontal='center', vertical='center', wrap_text=True)
    cell.alignment = Alignment(wrap_text=True)
    worksheet.cell(row=4, column=3).value = checklist.performer_ip
    worksheet.cell(row=4, column=4).value = checklist.chek_num
    worksheet.cell(row=4, column=5).value = checklist.obj_control
    worksheet.cell(row=4, column=6).value = checklist.date_document
    worksheet.cell(row=4, column=7).value = checklist.num_document
    worksheet.cell(row=4, column=8).value = checklist.colvo_doc
    worksheet.cell(row=4, column=9).value = checklist.colvo_errors
    worksheet.cell(row=4, column=10).value = checklist.notes

    total_errors = 0  # Инициализация переменной для суммирования ошибок

    border_style = Border(left=Side(border_style="thin", color="000000"),
                          right=Side(border_style="thin", color="000000"),
                          top=Side(border_style="thin", color="000000"),
                          bottom=Side(border_style="thin", color="000000")
                          )

    # Автоматическое расширение столбцов
    for column in worksheet3.columns:
        max_length = 15
        column_letter = get_column_letter(column[8].column)
        for cell in column:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(cell.value)

            except:
                pass
        adjusted_width = 20
        worksheet1.column_dimensions[column_letter].width = adjusted_width

    for row in worksheet3.rows:
        max_length = 1500
        for cell in row:
            try:
                if len(str(cell.value)) > max_length:
                    max_length = len(cell.value)
            except:
                pass
        adjusted_height = 250
        alignment = Alignment(horizontal='centerContinuous', vertical='center', wrap_text=True)

        for cell in worksheet1[row[8].column]:
            worksheet1.row_dimensions[cell.row].height = adjusted_height
            cell.alignment = alignment

    # Автоматическое расширение строк


    # Применение стиля границы к ячейкам
    for i in range(1, 8):
        for column in worksheet.iter_cols(min_row=3, max_row=25, min_col=i, max_col=i + 3):
            for cell in column:
                cell.border = border_style




    # Установка значений для "Должность" и "Подпись"
    worksheet.cell(row=2, column=5).value = "                      Реестр обьектов контроля"
    worksheet.cell(row=2, column=5).font = worksheet.cell(row=2, column=5).font.copy(bold=True)
    worksheet.cell(row=28, column=2).value = "_________________________"
    worksheet.cell(row=29, column=2).value = "               (должность)"
    worksheet.cell(row=28, column=4).value = "_______________________"
    worksheet.cell(row=29, column=4).value = "               (ФИО)"
    worksheet.cell(row=28, column=6).value = "_________________"
    worksheet.cell(row=29, column=6).value = "         (подпись)"


    response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
    response['Content-Disposition'] = 'attachment; filename=checklist.xlsx'
    workbook.save(response)
    return response


def svod2(request):
    if request.method == 'POST':
        files = request.FILES.getlist('files')  # Получение списка загруженных файлов


        # Создание пустого сводного DataFrame для первого листа
        summary_df1 = pd.DataFrame(
            columns=['номер п/п', 'Код КП(общий)', 'Код КП(промежуточный)', 'Наименование ИП',
                     'Подразделение, ответственное за проведение контрольной процедуры', 'Исполнитель КП',
                     'Количество выполненых КП', 'Количество выявленных ошибок', 'Количество контрольных процедур, не выявивших ошибки', 'Документ', 'Филиал'])




        summary_df2 = pd.DataFrame(
            columns=['номер п/п', 'Код КП(общий)', 'Код КП(промежуточный)', 'Наименование ИП',
                     'Подразделение, ответственное за проведение контрольной процедуры', 'Исполнитель КП',
                     'Количество выполненых КП', 'Количество выявленных ошибок', 'Документ', 'Филиал'])


        ##################################################################################################################
        summary_df3 = pd.DataFrame(
            columns=['Код БС', 'Количество', 'НУ-ОБЩ-1-КП-001', 'НУ-ОБЩ-1-КП-002', 'НУ-ОБЩ-1-КП-003',
'НУ-ОБЩ-1-КП-004', 'НУ-ОБЩ-1-КП-005', 'НУ-ОБЩ-1-КП-006',
'НУ-ОБЩ-1-КП-007', 'НУ-ОБЩ-1-КП-008', 'НУ-ОБЩ-1-КП-009',
'НУ-ОБЩ-1-КП-010', 'НУ-ОБЩ-1-КП-011', 'НУ-ПРИБ-1-КП-001',
'НУ-ПРИБ-1-КП-002', 'НУ-ПРИБ-1-КП-003', 'НУ-ПРИБ-1-КП-009',
'НУ-ПРИБ-1-КП-010', 'НУ-ПРИБ-1-КП-011', 'НУ-ПРИБ-1-КП-013',
'НУ-ПРИБ-1-КП-014', 'НУ-ПРИБ-1-КП-015', 'НУ-ПРИБ-1-КП-016',
'НУ-ПРИБ-1-КП-017', 'НУ-ПРИБ-1-КП-019', 'НУ-ПРИБ-1-КП-020',
'НУ-ПРИБ-1-КП-021' 'НУ-ПРИБ-1-КП-025', 'НУ-ПРИБ-1-КП-026'
'НУ-ПРИБ-1-КП-028', 'НУ-ПРИБ-1-КП-029', 'НУ-ПРИБ-1-КП-030',
'НУ-ПРИБ-1-КП-033', 'НУ-ПРИБ-1-КП-036', 'НУ-ПРИБ-1-КП-039',
'НУ-ПРИБ-1-КП-040', 'НУ-ПРИБ-1-КП-042', 'НУ-ПРИБ-1-КП-044',
'НУ-ПРИБ-1-КП-045', 'НУ-ПРИБ-1-КП-046', 'НУ-НДС-1-КП-001',
'НУ-НДС-1-КП-002', 'НУ-НДС-1-КП-003', 'НУ-НДС-1-КП-004',
'НУ-НДС-1-КП-005', 'НУ-НДС-1-КП-006', 'НУ-НДС-1-КП-007',
'НУ-НДС-1-КП-008', 'НУ-НДС-1-КП-009', 'НУ-НДС-1-КП-010',
'НУ-НДС-1-КП-011', 'НУ-НДС-1-КП-012', 'НУ-НДС-1-КП-013',
'НУ-НДС-1-КП-014', 'НУ-НДС-1-КП-015', 'НУ-НИ-1-КП-001',
'НУ-НИ-1-КП-002', 'НУ-НИ-1-КП-003', 'НУ-НИ-1-КП-004',
'НУ-НИ-1-КП-005', 'НУ-НИ-1-КП-006', 'НУ-ТН-1-КП-001',
'НУ-ТН-1-КП-002', 'НУ-ТН-1-КП-005', 'НУ-ТН-1-КП-004',
'НУ-ЗН-1-КП-001', 'НУ-ЗН-1-КП-002', 'НУ-ЗН-1-КП-003',
'НУ-ЗН-1-КП-004', 'НУ-НДПИ-1-КП-001', 'НУ-НДПИ-1-КП-002',
'НУ-НДПИ-1-КП-006', 'НУ-ВН-1-КП-001', 'НУ-ВН-1-КП-002',
'НУ-ВН-1-КП-003', 'НУ-НДФЛ-1-КП-001', 'НУ-НДФЛ-1-КП-003',
'НУ-НДФЛ-1-КП-004', 'НУ-НДФЛ-1-КП-005', 'НУ-НДФЛ-1-КП-006',
'НУ-СВ-1-КП-001', 'НУ-СВ-1-КП-002', 'НУ-СВ-1-КП-003', 'Итого'])

        summary_df4 = pd.DataFrame(
            columns=['№ п/п', 'Код КП(общий)', 'Количество выполненых КП', 'Количество выявленных ошибок', 'Документ, подтверждающий проведение контрольной процедуры', 'Наименование КП'])



        #################################################################################################################


        # Обработка каждого загруженного файла
        for file in files:
            # Чтение первого листа файла и взятие только значений
#            df1 = pd.read_excel(file, sheet_name='Sheet', usecols="A:K", header=None, skiprows=13, nrows=10000)
#            df1 = df1.set_axis(['номер п/п', 'Код КП(общий)', 'Код КП(промежуточный)', 'Наименование ИП',
#                     'Подразделение, ответственное за проведение контрольной процедуры', 'Исполнитель КП',
#                     'Количество выполненых КП', 'Количество выявленных ошибок', 'Количество контрольных процедур, не выявивших ошибки','Документ', 'Филиал'], axis=1)


            # Получение имени файла без расширения
#            file_name = os.path.splitext(file.name)[0]

            # Добавление столбика "Документ" в DataFrame и заполнение его названием файла
#            df1['Документ'] = file_name

#            df1.drop(['Документ'], axis=1,
#                     inplace=True)
#            df1 = df1.reset_index(drop=True)
#            df1 = df1.rename_axis([None], axis=1)



#            summary_df1 = pd.concat([summary_df1, df1], ignore_index=True)
            



            # Чтение второго листа файла и взятие только значений
#            df2 = pd.read_excel(file, sheet_name='Sheet', usecols="A:K", header=None, skiprows=13, nrows=10000)
#            df2 = df2.set_axis(['номер п/п', 'Код КП(общий)', 'Код КП(промежуточный)', 'Наименование ИП',
#                                'Подразделение, ответственное за проведение контрольной процедуры', 'Исполнитель КП',
#                                'Количество выполненых КП', 'Количество выявленных ошибок', 'Количество контрольных процедур, не выявивших ошибки', 'Документ', 'Филиал'],
#                               axis=1)


#            summary_df2 = summary_df1.groupby(['номер п/п', 'Наименование ИП', 'Код КП(общий)', 'Количество контрольных процедур, не выявивших ошибки', ]).agg(
#                {'Количество выполненых КП': 'sum', 'Количество выявленных ошибок': 'sum'}).reset_index()





            summary_df2 = pd.concat([summary_df2, ], ignore_index=True)



            ###############################################################################################################################
            # Чтение третьего листа файла и взятие только значений
            df3 = pd.read_excel(file, sheet_name='Sheet3', usecols="A:CD", header=None, skiprows=8, nrows=10000)
            df3 = df3.set_axis(['Код БС', 'Количество', 'НУ-ОБЩ-1-КП-001', 'НУ-ОБЩ-1-КП-002', 'НУ-ОБЩ-1-КП-003',
'НУ-ОБЩ-1-КП-004', 'НУ-ОБЩ-1-КП-005', 'НУ-ОБЩ-1-КП-006',
'НУ-ОБЩ-1-КП-007', 'НУ-ОБЩ-1-КП-008', 'НУ-ОБЩ-1-КП-009',
'НУ-ОБЩ-1-КП-010', 'НУ-ОБЩ-1-КП-011', 'НУ-ПРИБ-1-КП-001',
'НУ-ПРИБ-1-КП-002', 'НУ-ПРИБ-1-КП-003', 'НУ-ПРИБ-1-КП-009',
'НУ-ПРИБ-1-КП-010', 'НУ-ПРИБ-1-КП-011', 'НУ-ПРИБ-1-КП-013',
'НУ-ПРИБ-1-КП-014', 'НУ-ПРИБ-1-КП-015', 'НУ-ПРИБ-1-КП-016',
'НУ-ПРИБ-1-КП-017', 'НУ-ПРИБ-1-КП-019', 'НУ-ПРИБ-1-КП-020',
'НУ-ПРИБ-1-КП-021' 'НУ-ПРИБ-1-КП-025', 'НУ-ПРИБ-1-КП-026'
'НУ-ПРИБ-1-КП-028', 'НУ-ПРИБ-1-КП-029', 'НУ-ПРИБ-1-КП-030',
'НУ-ПРИБ-1-КП-033', 'НУ-ПРИБ-1-КП-036', 'НУ-ПРИБ-1-КП-039',
'НУ-ПРИБ-1-КП-040', 'НУ-ПРИБ-1-КП-042', 'НУ-ПРИБ-1-КП-044',
'НУ-ПРИБ-1-КП-045', 'НУ-ПРИБ-1-КП-046', 'НУ-НДС-1-КП-001',
'НУ-НДС-1-КП-002', 'НУ-НДС-1-КП-003', 'НУ-НДС-1-КП-004',
'НУ-НДС-1-КП-005', 'НУ-НДС-1-КП-006', 'НУ-НДС-1-КП-007',
'НУ-НДС-1-КП-008', 'НУ-НДС-1-КП-009', 'НУ-НДС-1-КП-010',
'НУ-НДС-1-КП-011', 'НУ-НДС-1-КП-012', 'НУ-НДС-1-КП-013',
'НУ-НДС-1-КП-014', 'НУ-НДС-1-КП-015', 'НУ-НИ-1-КП-001',
'НУ-НИ-1-КП-002', 'НУ-НИ-1-КП-003', 'НУ-НИ-1-КП-004',
'НУ-НИ-1-КП-005', 'НУ-НИ-1-КП-006', 'НУ-ТН-1-КП-001',
'НУ-ТН-1-КП-002', 'НУ-ТН-1-КП-005', 'НУ-ТН-1-КП-004',
'НУ-ЗН-1-КП-001', 'НУ-ЗН-1-КП-002', 'НУ-ЗН-1-КП-003',
'НУ-ЗН-1-КП-004', 'НУ-НДПИ-1-КП-001', 'НУ-НДПИ-1-КП-002',
'НУ-НДПИ-1-КП-006', 'НУ-ВН-1-КП-001', 'НУ-ВН-1-КП-002',
'НУ-ВН-1-КП-003', 'НУ-НДФЛ-1-КП-001', 'НУ-НДФЛ-1-КП-003',
'НУ-НДФЛ-1-КП-004', 'НУ-НДФЛ-1-КП-005', 'НУ-НДФЛ-1-КП-006',
'НУ-СВ-1-КП-001', 'НУ-СВ-1-КП-002', 'НУ-СВ-1-КП-003', 'Итого'

            ], axis=1)



            summary_df3 = pd.concat([summary_df3, df3], ignore_index=True)


            df4 = pd.read_excel(file, sheet_name='Sheet4', usecols="A:G", header=None, skiprows=1, nrows=10000)
            df4 = df4.set_axis(['№ п/п', 'Код КП(общий)', 'Количество выполненых КП', 'Количество выявленных ошибок', 'Количество контрольных процедур, не выявивших ошибки' ,'Документ, подтверждающий проведение контрольной процедуры', 'Наименование КП'

                                ], axis=1)

            summary_df4 = pd.concat([summary_df4, df4], ignore_index=True)
            summary_df4 = summary_df4.groupby(['№ п/п', 'Наименование КП', 'Код КП(общий)', ]).agg(
                {'Количество выполненых КП': 'sum', 'Количество выявленных ошибок': 'sum'}).reset_index()


            summary_df4['Количество контрольных процедур, не выявивших ошибки'] = summary_df4[
                                                                                     'Количество выполненых КП'] - \
                                                                                 summary_df4[
                                                                                     'Количество выявленных ошибок']


            summary_df4[
                'Документ, подтверждающий проведение контрольной процедуры'] = 'Чек-лист/Реестр объектов контроля'


            # Группировка данных по полю 'Код КП(общий)' и суммирование полей 'Количество выполненых КП' и 'Количество выявленных ошибок'

        ########################################################################################################################################

        # Создание нового файла Excel с двумя листами
        with pd.ExcelWriter('summary.xlsx', engine='openpyxl') as writer:
#            summary_df1.to_excel(writer, sheet_name='Sheet', index=False)
#            summary_df2.to_excel(writer, sheet_name='Sheet2', index=False)
            summary_df3.to_excel(writer, sheet_name='Sheet3', index=False)
            summary_df4.to_excel(writer, sheet_name='Sheet4', index=False)


            # Получение объекта workbook
            workbook = writer.book

            # Получение объекта worksheet для первого листа
#            worksheet1 = writer.sheets['Sheet']
#            worksheet2 = writer.sheets['Sheet2']
            worksheet3 = writer.sheets['Sheet3']
            worksheet4 = writer.sheets['Sheet4']



            # Установка границ объединения ячеек

            worksheet1 = workbook.active

            #worksheet1.merge_cells('E14:E30')
            num_rows = summary_df1.shape[0]



            values = ['АУП', 'Югорское УМТС и К', 'УОВОФ', 'Надымское УАВР', 'Югорское УАВР', 'Белоярское УАВР',
                      'Надымское УТТиСТ', 'Югорское УТТиСТ', 'Белоярское УТТиСТ', 'ИТЦ',
                      'Учебно-производственный центр', 'УЭЗ и С', 'Управление связи', 'Бобровское ЛПУ',
                      'Верхнеказымское ЛПУ', 'Ивдельское ЛПУ', 'Казымское ЛПУ',
                      'Карпинское ЛПУ', 'Комсомольское ЛПУ', 'Краснотурьинское ЛПУ',
                      'Лонг-Юганское ЛПУ', 'Надымское ЛПУ', 'Нижнетуринское ЛПУ', 'Ново-Уренгойское ЛПУ',
                      'Ныдинское ЛПУ', 'Октябрьское ЛПУ', 'Пангодинское ЛПУ'
                      'Пелымское ЛПУ', 'Перегребненское ЛПУ', 'Правохеттинское ЛПУ', 'Приозерное ЛПУ',
                      'Пунгинское ЛПУ', 'Сорумское ЛПУ', 'Сосновское ЛПУ',
                      'Таежное ЛПУ', 'Уральское ЛПУ', 'Ягельное ЛПУ', 'Ямбургское ЛПУ', 'Санаторий-профилакторий', 'КСК Норд'
                      ]

            # Создаем объект DataValidation
            data_validation = DataValidation(type="list", formula1='"{}"'.format(','.join(values)))

            # Применяем DataValidation к нужным ячейкам (например, H3 и I3)
            worksheet1.add_data_validation(data_validation)
            data_validation.add(worksheet1['D3'])

            values2 = ['За Декабрь 2023г', 'За Январь 2023г', 'За Февраль 2023г', 'За Март 2023г', 'За Апрель 2023г', 'За Май 2023г',
                      'За Июнь 2023г', 'За Июль 2023г', 'За Август 2023г', 'За Сентябрь 2023г',
                      'За Октябрь 2023г', 'За Ноябрь 2023г',
                      ]

            # Создаем объект DataValidation
            data_validation = DataValidation(type="list", formula1='"{}"'.format(','.join(values2)))

            # Применяем DataValidation к нужным ячейкам (например, H3 и I3)
            worksheet1.add_data_validation(data_validation)
            data_validation.add(worksheet1['D7'])

            # Запись значения по умолчанию в ячейку B2


            # Сохранение файла Excel
            table_end_row = worksheet1.max_row


            #worksheet1.delete_cols(5, 3)
            worksheet1.delete_cols(3)
            worksheet1.delete_cols(3)
            worksheet1.delete_cols(3)
            worksheet1.delete_cols(3)
            worksheet1.delete_cols(6)

            #worksheet2.delete_cols(3)
            #worksheet2.delete_cols(4)
            #worksheet2.delete_cols(4)
            #worksheet2.delete_cols(7)
            #worksheet2.delete_cols(6)

            worksheet4 = writer.sheets['Sheet4']
            # После удаления столбка 4, столбок 6 станет столбком 7
            last_row = worksheet4.max_row
            sum_formula = "Итого:"
            worksheet4.cell(row=last_row + 1, column=3).value = sum_formula

            last_row1 = worksheet4.max_row
            sum_formula1 = f"=SUM(D1:D{last_row})"
            worksheet4.cell(row=last_row1 + 0, column=4).value = sum_formula1

            last_row2 = worksheet4.max_row
            sum_formula1 = f"=SUM(E1:E{last_row})"
            worksheet4.cell(row=last_row2 + 0, column=5).value = sum_formula1

            last_row2 = worksheet4.max_row
            sum_formula1 = f"=SUM(F1:F{last_row})"
            worksheet4.cell(row=last_row2 + 0, column=6).value = sum_formula1
            #################################################################################33


            worksheet3 = writer.sheets['Sheet3']
            # После удаления столбка 4, столбок 6 станет столбком 7
            last_row = worksheet3.max_row
            sum_formula = "Итого:"
            worksheet3.cell(row=last_row + 1, column=2).value = sum_formula

            last_row1 = worksheet3.max_row
            sum_formula1 = f"=SUM(C1:C{last_row})"
            worksheet3.cell(row=last_row1 + 0, column=3).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(D1:D{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=4).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(E1:E{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=5).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(F1:F{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=6).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(G1:G{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=7).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(H1:H{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=8).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(I1:I{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=9).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(J1:J{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=10).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(K1:K{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=11).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(L1:L{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=12).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(M1:M{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=13).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(N1:N{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=14).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(O1:O{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=15).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(P1:P{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=16).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(Q1:Q{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=17).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(R1:R{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=18).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(S1:S{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=19).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(T1:T{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=20).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(U1:U{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=21).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(V1:V{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=22).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(W1:W{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=23).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(X1:X{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=24).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(Y1:Y{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=25).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(Z1:Z{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=26).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AA1:AA{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=27).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AB1:AB{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=28).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AC1:AC{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=29).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AD1:AD{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=30).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AE1:AE{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=31).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AF1:AF{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=32).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AG1:AG{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=33).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AH1:AH{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=34).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AI1:AI{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=35).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AJ1:AJ{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=36).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AK1:AK{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=37).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AL1:AL{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=38).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AM1:AM{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=39).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AN1:AN{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=40).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AO1:AO{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=41).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AP1:AP{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=42).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AQ1:AQ{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=43).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AR1:AR{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=44).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AS1:AS{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=45).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AT1:AT{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=46).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AU1:AU{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=47).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AV1:AV{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=48).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AW1:AW{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=49).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AX1:AX{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=50).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AY1:AY{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=51).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(AZ1:AZ{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=52).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BA1:BA{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=53).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BB1:BB{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=54).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BC1:BC{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=55).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BD1:BD{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=56).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BE1:BE{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=57).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BF1:BF{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=58).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BG1:BG{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=59).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BH1:BH{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=60).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BI1:BI{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=61).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BJ1:BJ{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=62).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BK1:BK{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=63).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BL1:BL{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=64).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BM1:BM{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=65).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BN1:BN{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=66).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BO1:BO{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=67).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BP1:BP{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=68).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BQ1:BQ{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=69).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BR1:BR{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=70).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BS1:BS{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=71).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BT1:BT{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=72).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BU1:BU{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=73).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BV1:BV{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=74).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BW1:BW{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=75).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BX1:BX{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=76).value = sum_formula1

            last_row2 = worksheet3.max_row
            sum_formula1 = f"=SUM(BY1:BY{last_row})"
            worksheet3.cell(row=last_row2 + 0, column=77).value = sum_formula1

            #last_row2 = worksheet3.max_row
            #sum_formula1 = f"=SUM(BZ1:BZ{last_row})"
            #worksheet3.cell(row=last_row2 + 0, column=78).value = sum_formula1

            #last_row2 = worksheet3.max_row
            #sum_formula1 = f"=SUM(CA1:CA{last_row})"
            #worksheet3.cell(row=last_row2 + 0, column=79).value = sum_formula1

            #last_row2 = worksheet3.max_row
            #sum_formula1 = f"=SUM(CB1:CB{last_row})"
            #worksheet3.cell(row=last_row2 + 0, column=80).value = sum_formula1

            #last_row2 = worksheet3.max_row
            #sum_formula1 = f"=SUM(CD1:CD{last_row})"
            #worksheet3.cell(row=last_row2 + 0, column=81).value = sum_formula1
##########################################################################################


            #worksheet3.insert_cols(3)
            #worksheet3.cell(row=1, column=3).value = "Итого"

            #last_row2 = worksheet3.max_row
            #sum_formula1 = f"=SUM(D2:CD2)"
            #worksheet3.cell(row=2, column=3).value = sum_formula1

            #last_row2 = worksheet3.max_row
            #sum_formula1 = f"=SUM(D3:CD3)"
            #worksheet3.cell(row=3, column=3).value = sum_formula1

            #last_row2 = worksheet3.max_row
            #sum_formula1 = f"=SUM(D4:CD4)"
            #worksheet3.cell(row=4, column=3).value = sum_formula1

            #last_row2 = worksheet3.max_row
            #sum_formula1 = f"=SUM(D5:CD5)"
            #worksheet3.cell(row=5, column=3).value = sum_formula1

            #last_row2 = worksheet3.max_row
            #sum_formula1 = f"=SUM(D6:CD6)"
            #worksheet3.cell(row=6, column=3).value = sum_formula1

            #last_row2 = worksheet3.max_row
            #sum_formula1 = f"=SUM(D7:CD7)"
            #worksheet3.cell(row=7, column=3).value = sum_formula1




            # Заголовки столбцов

            # ДоFбавляем столбец "филиалы1" с указанными значениями



###############################################################################

            # Добавляем заголовки для столбцов






###############################################################################

            #worksheet1.delete_cols(4)

            # Удаление столбиков с индексами 5, 6 и 7

            worksheet3 = writer.sheets['Sheet3']

            # Опускание таблицы на 2 строк ниже начиная с первой строки

            # Автоматическое расширение столбцов для второго листа

            # Опускание таблицы на 2 строк ниже начиная с первой строки



#            for row in range(worksheet1.max_row, 0, -1):
#                max_length = 20
#                for cell in worksheet1[row]:
#                    if len(str(cell.value)) > max_length:
#                        max_length = len(str(cell.value))
#                worksheet1.row_dimensions[row].height = max_length

#                for column_cells in worksheet1.columns:
#                    length = max(len(str(cell.value)) for cell in column_cells)
#                    worksheet1.column_dimensions[column_cells[0].column_letter].width = length

                # Установка выравнивания для каждой ячейки в строке
#                for cell in worksheet1[row]:
#                    cell.alignment = Alignment( vertical='center', wrap_text=True)
            # Опускание таблицы на 12 строк ниже начиная с первой строки

                    # Установка выравнивания для каждой ячейки в строке
                    # Получение объекта worksheet для второго листа

                    # Опускание таблицы на 2 строк ниже начиная с первой строки

                    # Автоматическое расширение столбцов для второго листа
#                    for column_cells in worksheet2.columns:
#                        length = max(len(str(cell.value)) for cell in column_cells)
#                        worksheet2.column_dimensions[column_cells[0].column_letter].width = length

#                        for cell in worksheet2[row]:
#                            cell.alignment = Alignment(horizontal='centerContinuous', vertical='center', wrap_text=True)

#                for column_cells in worksheet3.columns:
#                    length = max(len(str(cell.value)) for cell in column_cells)
#                    worksheet3.column_dimensions[column_cells[0].column_letter].width = length

#                    for cell in worksheet2[row]:
#                        cell.alignment = Alignment(horizontal='centerContinuous', vertical='center', wrap_text=True)


            workbook.save("example2.xlsx")


            # Автоматическое расширение столбцов для первого листа


        file_path = 'summary.xlsx'  # Путь к файлу
        with open(file_path, 'rb') as file:
            response = HttpResponse(file.read(), content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            response['Content-Disposition'] = 'attachment; filename=summary.xlsx'
            return response

    return render(request, 'svod2.html')  # Отображение шаблона "upload.html".




def missing_data(request):
    if request.method == 'POST':
        # Получаем загруженный файл
        uploaded_file = request.FILES['file']

        # Шаг 1: Прочитать таблицу из файла
        df = pd.read_excel(uploaded_file)

        коды_кп = ['НУ-ОБЩ-1-КП-001', 'НУ-ОБЩ-1-КП-002', 'НУ-ОБЩ-1-КП-003', 'НУ-ОБЩ-1-КП-004', 'НУ-ОБЩ-1-КП-005',
                   'НУ-ОБЩ-1-КП-006', 'НУ-ОБЩ-1-КП-007', 'НУ-ОБЩ-1-КП-008', 'НУ-ОБЩ-1-КП-009', 'НУ-ОБЩ-1-КП-010',
                   'НУ-ОБЩ-1-КП-011', 'НУ-ПРИБ-1-КП-001', 'НУ-ПРИБ-1-КП-002', 'НУ-ПРИБ-1-КП-003', 'НУ-ПРИБ-1-КП-009',
                   'НУ-ПРИБ-1-КП-010', 'НУ-ПРИБ-1-КП-011', 'НУ-ПРИБ-1-КП-013', 'НУ-ПРИБ-1-КП-014', 'НУ-ПРИБ-1-КП-015',
                  ]
        # Список всех филиалов
        филиалы = ['АУП', 'Югорское УМТС и К', 'УОВОФ', 'Надымское УАВР', 'Югорское УАВР', 'Белоярское УАВР',
                           'Надымское УТТиСТ', 'Югорское УТТиСТ', 'Белоярское УТТиСТ', 'ИТЦ',
                           'Учебно-производственный центр', 'УЭЗ и С', 'Управление связи', 'Бобровское ЛПУ',
                           'Верхнеказымское ЛПУ', 'Ивдельское ЛПУ', 'Казымское ЛПУ', 'Карпинское ЛПУ',
                           'Комсомольское ЛПУ', 'Краснотурьинское ЛПУ', 'Лонг-Юганское ЛПУ', 'Надымское ЛПУ',
                          ]
        # Шаг 2: Проверить наличие каждого кода КП и каждого филиала в таблице
        отсутствующие_коды_кп = []
        отсутствующие_филиалы = []
        for код_кп in коды_кп:
            if код_кп not in df['Код КП(общий)', ].tolist():
                отсутствующие_коды_кп.append(код_кп)
        for филиал in филиалы:
            if филиал not in df['Филиал'].tolist():
                отсутствующие_филиалы.append(филиал)

        # Шаг 3: Сохранить отсутствующие коды КП и филиалы в файл Excel



        if len(отсутствующие_коды_кп) > 0 or len(отсутствующие_филиалы) > 0:
            df_missing_kp_codes = pd.DataFrame({'Missing KP Codes': отсутствующие_коды_кп})
            df_missing_branches = pd.DataFrame({'Missing Branches': отсутствующие_филиалы})
            with pd.ExcelWriter('missing_data.xlsx') as writer:
                df_missing_kp_codes.to_excel(writer, sheet_name='Missing KP Codes', index=False)
                df_missing_branches.to_excel(writer, sheet_name='Missing Branches', index=False)

            # Создаем объект HttpResponse с указанием типа содержимого файла и заголовков
            response = HttpResponse(content_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet')
            response['Content-Disposition'] = 'attachment; filename="missing_data.xlsx"'

            # Записываем содержимое файла в объект HttpResponse
            with open('missing_data.xlsx', 'rb') as file:
                response.write(file.read())

            return response
        else:
            message = 'Все коды КП и филиалы присутствуют в таблице.'
            return render(request, 'missing_data.html', {'message': message})

    return render(request, 'missing_data.html')


